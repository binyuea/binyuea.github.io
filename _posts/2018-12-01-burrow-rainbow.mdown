---
layout:     post
title:      Burrow Rainbow
author:     Haibin
tags:		github kafka go
subtitle:  	Burrow service provides visibility for Apache Kafka users
category:  projects
---
## Burrow Rainbow
- The original [Burrow](https://github.com/linkedin/Burrow) is a Lag monitoring service for Apache Kafka. 
- In Zuora, Burrow Rainbow provides more visibility for other teams who are using our Kafka service. 
    - Producer status: for each producer, how many records produced to each partition.
    - Consumer status: for each consumer, which partition(s) are hosted and how many records consumed per minute.
    - Lag: total lag in the whole consumer group and partition level lag.  

### What is Burrow from Linkedin
Burrow is a monitoring companion for Apache Kafka that provides consumer lag checking as a service without the need for specifying thresholds. It monitors committed offsets for all consumers and calculates the status of those consumers on demand. An HTTP endpoint is provided to request status on demand, as well as provide other Kafka cluster information. There are also configurable notifiers that can send status out via email or HTTP calls to another service.  
 
Here is my inspection of Burrow source code <a href="https://github.com/HarbinZhang/goRainbow/tree/master/burrow" style="color: rgb(0,102,204)">Burrow Inspection</a>  

### What is my work
In Zuora, I own Burrow service, including Dockerfile, ansible-quasar, Jenkinsfile for CICD, goRainbow and wavefront dashboard.  

The main work is about Rainbow, which pulls information from Burrow, translates it into metrics, and sends it to the wavefront.  

I implemented push-model rainbow(waiting for Burrow message) at first, but got some problem. The Burrow notifier is not stable all the time. After discussed with teammates, I implemented pull-model rainbow(activly pull information from Burrow) and now it works much better.  

### Link
goRainbow github link <a href="https://github.com/HarbinZhang/goRainbow" style="color: rgb(0,102,204)">More details</a>
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/rainbow_structure.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
1. Each `consumer handler` is responsible for one consumer and has one specific url(`burrow/{cluster}/{consumer}`) to pull the consumer info from Burrow.
2. `alive consumers maintainer` checks Burrow periodically to see whether there is a new consumer or not. If so, it would raise a new `consumer handler` for the new consumer.
3. `consumer handler` would deregister itself in `alive consumers maintainer` when its consumer is not valid any longer.  

### Features worthy mention
1. Heath-check: It provides health-check HTTP service so that AWS can auto restart Burrow-goRainbow when the service is unavailable.
2. Dynamic metrics sending:
   1. It sends partition level metrics when lag exists(lag > 0), otherwise doesn't send. It saves a lot traffic.
   2. It guarantees every metric ends with 0, which behaves better in wavefront.
   3. It sends metrics per 30s when metrics change and per 60s for unchanged metrics.  
3. Traffic saving calculation: (saves at least 85% data traffic)  
Until March 2019, we have:
   1. 25 consumer groups are using our Kafka service.   
   2. 64 partitions for each topic.   
   3. Basically, 3 metrics for each partition level lag. (offset, startOffset, endOffset).  

- Without dynamic metrics sending, we should have sent 4950 metrics each time.  
(totalLagMetrics(1) + maxLagPartitionMetrics(5) + allPartitionsMetrics(64*3)) * consumers(25) = 4950 metrics each time. 
- With dynamic metrics sending, we should have sent 726 metrics each time.  
(totalLagMetrics(1) + maxLagPartitionMetrics(5) + allPartitionsMetrics(64*3)) * consumersWithLag(3) +  
  (totalLagMetrics(1) + maxLagPartitionMetrics(5)) * consumersWithoutLag(22) = 726
- In conclusion, we can save at least 85% data traffic for consumer lag part, because consumers are not having lag all the time and only partitions with lag would send metrics.
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/dynamicTraffic.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
### Dashboard
- Lag (Hold the picture to zoom in)
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/lag.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
<br>
- Lag details (Hold the picture to zoom in)
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/thl_raw.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
<br>
- Total traffic (Hold the picture to zoom in)
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/totalTraffic.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
<br>
- Each env traffic (Hold the picture to zoom in)
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/eachTraffic.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
<br>
### Link
<a href="https://github.com/HarbinZhang/goRainbow" style="color: rgb(0,102,204)">More details</a>
